class Solution {
public:
bool dfs(int node , vector<bool>&visited , vector<bool>&currvisited , vector<vector<int>>&adj){
visited[node]=true;
currvisited[node]=true;
vector<int> data=adj[node];
for(auto x:data){
    if(!visited[x]){
    if(dfs(x , visited , currvisited , adj)){
        return true;
    }
    }
    else if(visited[x] && currvisited[x]){
        return true;
    }
}
currvisited[node]=false;
return false;
}
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        if(numCourses==0){
            return true;
        }
        int n=numCourses;
        vector<bool>visited(n , false), currvisited(n , false);
        vector<vector<int>>adj(n);
        for(auto x:prerequisites){
            int a=x[0];
            int b=x[1];
            adj[a].push_back(b);
        }
        for(int i=0; i<n ; i++){
            if(!visited[i]){
                if(dfs(i , visited , currvisited , adj)){
                    return false;
                }
            }
        }
        return true;
        
    }
};
