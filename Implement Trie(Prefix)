class TrieNode{
    public:
    bool isword;
    TrieNode*child[26];
    TrieNode(){
        isword=false;
        for(auto &a:child){
            a=NULL;
        }
    }
};
class Trie {
public:
 
TrieNode *root;
    Trie() {
        root=new TrieNode();
    }
    
    void insert(string word) {
    
     TrieNode*p=root;
     for(auto &a:word){
         int i=a-'a';
         if(!p->child[i]){
             p->child[i]=new TrieNode();
         }
        p=p->child[i];
     } 
      p->isword=true;

    }
    
    bool search(string word,bool prefix=false) {
         
        TrieNode*p=root;
        for(auto &a:word){
            int i=a-'a';
            if(!p->child[i]){
                return false;
            }
           p= p->child[i];
        }
        if(prefix==false){
            return p->isword;
        }
        return true;
    }
    
    bool startsWith(string prefix) {
        return search(prefix , true);
    }
};
