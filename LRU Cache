class LRUCache {
public:
list<pair<int , int>>l;
unordered_map<int , list<pair<int ,int>>::iterator>map;
int size;

    LRUCache(int capacity) {
      size=capacity;

    }
    
    int get(int key) {
       if(map.find(key)==map.end()){
           return -1;
       }
       l.splice(l.begin() , l , map[key]);
       return map[key]->second;

    }
    
    void put(int key, int value) {
        if(map.find(key)!=map.end()){
            l.splice(l.begin() ,l ,map[key]);
            map[key]->second=value;
            return;
        }
        if(l.size()==size){
            auto d_key =l.back().first;
            l.pop_back();
            map.erase(d_key);
        }
        l.push_front({key , value});
        map[key]=l.begin();

    }
};

