#Set Matrix Zeroes
CODE:
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        bool row[n];
        bool col[m];
        for(int i=0; i<n; i++){
            row[i]=false;
        }
        for(int j=0; j<m ; j++){
            col[j]=false;
        }
        for(int i=0; i<n ; i++){
            for(int j=0; j<m ; j++){
                if(matrix[i][j]==0){
                     row[i]=true;
                     col[j]=true;
                }
            }
        }
        for(int i=0; i<n ; i++){
            for(int j=0; j<m ; j++){
                if(row[i]==true || col[j]==true)
                matrix[i][j]=0;
            }
        }
    }
};


#Pascal's Triangle
CODE:
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> arr(numRows);
        for(int i=0; i<numRows ; i++){
            arr[i].resize(i+1);
            arr[i][0]=arr[i][i]=1;
            for(int j=1 ; j<i ; j++){
                arr[i][j] = arr[i-1][j-1] + arr[i-1][j];
            }
        }
        return arr;
        
    }
};

#Next Permutation
CODE:
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        //next_permutation(nums.begin() , nums.end());
        int index=-1;
        for(int i=n-2 ; i>=0 ; i--){
            if(nums[i]<nums[i+1]){
                index=i;
                break;
            }
        }
        for(int i=n-1; i>=index && index!=-1 ; i--){
            if(nums[i]>nums[index]){
                swap(nums[i] , nums[index]);
                break;
            }
        }
        reverse(nums.begin()+index+1 , nums.end());
    }
};

#Maximum Subarray
CODE:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        int ans=INT_MIN;
        for(int i=0; i<n ; i++){
            sum+=nums[i];
            ans=max(ans , sum);
            sum=max(sum,0);
         }
        return ans;
    }
};

#Sort Colors
CODE:
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin() , nums.end());
        
    }
};


#Best Time to Buy and Sell Stock
CODE:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int curr=prices[0];
        int s=0;
        for(int i=1; i<n ; i++){
          s= max(s, prices[i]-curr);
          curr=min(curr , prices[i]);
        }
         return s;
        
    }
};
