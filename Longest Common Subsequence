class Solution {
public:
int helper(string text1 , string text2 , int n , int m){
    if(n==0 || m==0){
        return 0;
    }
    if(text1[n-1]==text2[m-1]){
        return 1+helper(text1 , text2 , n-1 , m-1);
    }
    else{
        return max(helper(text1 , text2 , n-1 , m) , helper(text1 , text2 , n , m-1));
    }
}
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size();
        int m=text2.size();
        if(n==0 || m==0){
            return 0;
        }
        //return helper(text1 , text2 , n , m);
        int** output= new int*[n+1];
        for(int i=0; i<=n ; i++){
            output[i]=new int[m+1];
        }
        for(int i=0; i<= n ; i++){
            output[i][0]=0;
        }
        for(int j=0; j<=m ; j++){
            output[0][j]=0;

        }
        for(int i=1 ; i<=n ; i++){
            for(int j=1; j<=m ; j++){
                if(text1[n-i]==text2[m-j]){
                    output[i][j]=1+output[i-1][j-1];
                }
                else{
                    int a=output[i-1][j-1];
                    int b=output[i][j-1];
                    int c=output[i-1][j];
                    output[i][j]=max(a , max(b , c));
                }
            }
        }
        return output[n][m];
    }
};
