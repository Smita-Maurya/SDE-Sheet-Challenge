class Solution {
public:
    void helper(vector<int>&arr , int tar , vector<vector<int>>&res , vector<int> &r , int i){
       if(tar==0){
           res.push_back(r);
           return;
       }
       while(i<arr.size() && tar-arr[i]>=0){
           r.push_back(arr[i]);
           helper(arr , tar-arr[i] , res , r ,i);
               i++;

               r.pop_back();
               
           
       }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        int n=candidates.size();
         sort(candidates.begin() ,candidates.end());
         candidates.erase(unique(candidates.begin() , candidates.end()) , candidates.end());
         vector<int>r;
         vector<vector<int>> res;
         helper(candidates, target , res , r,0);
         return res;
    }
};
